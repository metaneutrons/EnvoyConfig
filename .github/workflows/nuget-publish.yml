name: Publish NuGet Packages from Release

permissions:
  contents: read
  packages: write

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: "Version tag to publish (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  publish-nuget:
    runs-on: ubuntu-latest
    steps:
      - name: Validate input
        run: |
          if [[ "${{ github.event.inputs.version_tag }}" != v* ]]; then
            echo "Error: Version tag must start with 'v' (e.g., v1.0.0)"
            exit 1
          fi
          echo "Publishing version: ${{ github.event.inputs.version_tag }}"

      - name: Download release NuGet packages
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: tag-release.yml
          workflow_conclusion: success
          name: nuget-package
          path: ./artifacts
          ref: refs/tags/${{ github.event.inputs.version_tag }}

      - name: List packages to be published
        run: |
          echo "Packages to be published:"
          ls -la ./artifacts/*.nupkg || echo "No .nupkg files found"

      - name: Publish all .nupkg packages to NuGet.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          for pkg in ./artifacts/*.nupkg; do
            if [ -f "$pkg" ]; then
              echo "Publishing $pkg..."
              dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source "https://api.nuget.org/v3/index.json" --skip-duplicate
            fi
          done

              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `✅ Publishing confirmed by @${approver}. Proceeding with NuGet.org publishing.`
            });

            // Set output using the core module (automatically available in GitHub Actions script context)
            core.setOutput('status', 'confirmed');
            console.log('Setting status output to confirmed');
            return 'confirmed';

      - name: Debug Output
        run: |
          echo "Confirmation status: ${{ steps.wait_confirmation.outputs.status }}"
          echo "Confirmation result: ${{ steps.wait_confirmation.outputs.result }}"
          echo "All outputs:"
          echo "${{ toJSON(steps.wait_confirmation.outputs) }}"

      # Capture the output from the wait_confirmation step
      - name: Set Confirmation Status
        id: confirmation_status
        run: |
          if [[ "${{ steps.wait_confirmation.outputs.result }}" == "confirmed" || "${{ steps.wait_confirmation.outputs.status }}" == "confirmed" ]]; then
            echo "Publishing was confirmed by admin"
            echo "status=confirmed" >> $GITHUB_OUTPUT
          else
            echo "Publishing was NOT confirmed"
            echo "status=not_confirmed" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NuGet.org
        if: steps.confirmation_status.outputs.status == 'confirmed'
        run: |
          echo "Publishing to NuGet.org..."
          dotnet nuget push "./artifacts/*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate

          echo "✅ Package(s) published to NuGet.org successfully!"

      - name: Update publish status
        if: steps.confirmation_status.outputs.status == 'confirmed'
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = ${{ steps.confirm.outputs.result }};
            const approver = process.env.APPROVER || 'an authorized user';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `✅ Package published to NuGet.org successfully!

              **Version:** ${{ github.event.inputs.version_tag }}
              **Approved by:** @${approver}
              **Published at:** ${new Date().toISOString()}
              `
            });
